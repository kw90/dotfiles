# vim style tmux config

# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
set -g base-index 1
set -g prefix C-a
#bind Space send-prefix

# Easy config reload
bind-key R source-file ~/.config/tmux/tmux.conf \; move-window -r\; display-message "tmux.conf reloaded and windows reordered."

# vi is good
setw -g mode-keys vi

# mouse behavior
setw -g mouse on

# Set tmux configs
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"
set -s escape-time 200

# Platform specific settings
run-shell 'tmux setenv -g TMUX_PLATFORM $(uname -s)'

if-shell -b '[ "$(echo $TMUX_PLATFORM)" = "Darwin" ]' {
    set-option -g default-command "reattach-to-user-namespace -l zsh"
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
    unbind -T copy-mode-vi Enter
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
    set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"
}

# WSL settings
if-shell "[ -f /proc/version ] && grep -qi microsoft /proc/version" {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "~/.local/bin/wsl-copy"
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "~/.local/bin/wsl-copy"
    set-option -g default-shell "/usr/bin/zsh"
    set-environment -g GPG_TTY $(tty)
}

# Generic Linux (non-WSL) settings
if-shell -b '[ "$(echo $TMUX_PLATFORM)" = "Linux" ] && [ -z "$WSL_DISTRO_NAME" ]' {
    bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
    set-option -g default-shell "/bin/zsh"
}

bind-key -T copy-mode-vi v send -X begin-selection

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key | split-window -h
bind-key _ split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

# Change layouts
bind-key C-o rotate-window
bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical

# Move panes
bind-key -n M-K swap-pane -U
bind-key -n M-J swap-pane -D
bind-key -n M-H select-pane -L \; swap-pane -s '!' \; select-pane -L
bind-key -n M-L select-pane -R \; swap-pane -s '!' \; select-pane -R
bind -n M-f move-pane -t '.-'
bind -n M-r move-pane -h -t '.-'

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key [ copy-mode
bind-key ] paste-buffer

# Set window notifications
# Disable activity alerts
set-option -g monitor-activity off
set-option -g visual-activity off
# Disable bell alerts
set-option -g bell-action none
set-option -g visual-bell off
set-option -g monitor-bell off

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Set how tmux looks and windows interaction
set-option -g status-position top
set-option -g status-interval 5
set-option -g renumber-windows on
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# Set vim things
# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'MunifTanjim/tmux-mode-indicator'

# Setup right status bar
set -g status-right-length "60"
set -g @nord_tmux_show_status_content "0"

BG_COLOR="#26242d"
WINDOW_COLOR="#ffbd5e"
HOSTNAME_COLOR="#5df1ff"
MAIN_COLOR="#5ea1ff"
SECONDARY_COLOR="#5eff6c"
TERTIARY_COLOR="#fe5fa4"
TMUX_LISTENING_COLOR=$TERTIARY_COLOR
TMUX_COPY_COLOR="#5df1ff"

# Status Bar
set-option -g status-left "\
#[fg=colour7,bg=$MAIN_COLOR]#{?client_prefix,#[bg=$TMUX_LISTENING_COLOR],} ‚ùê #S \
#[fg=$MAIN_COLOR,bg=$BG_COLOR]#{?client_prefix,#[fg=$TMUX_LISTENING_COLOR],}ÓÇ∞#{?window_zoomed_flag, üîç,}"
set-window-option -g window-status-current-format "\
#[fg=$BG_COLOR,bg=$WINDOW_COLOR]ÓÇ∞\
#[fg=colour239,bg=$WINDOW_COLOR] #I* ÓÇ±\
#[fg=colour239,bg=$WINDOW_COLOR, bold] #W \
#[fg=$WINDOW_COLOR,bg=$BG_COLOR]ÓÇ∞"
set-window-option -g window-status-format "\
#[fg=$BG_COLOR,bg=colour239,noitalics]ÓÇ∞\
#[fg=colour223,bg=colour239] #I ÓÇ±\
#[fg=colour223,bg=colour239] #W \
#[fg=colour239,bg=$BG_COLOR]ÓÇ∞"
set -g status-right "\
#[fg=$SECONDARY_COLOR]ÓÇ≤\
#[fg=black,bg=$SECONDARY_COLOR] #{tmux_mode_indicator}\
#[fg=black,bg=$SECONDARY_COLOR]ÓÇ≤\
#[fg=colour7,bg=black] #{battery_icon} #{battery_percentage} ÓÇ≥ #{cpu_icon} #{cpu_percentage} \
#[fg=$TERTIARY_COLOR,bg=black]ÓÇ≤\
#[fg=black,bg=$TERTIARY_COLOR] %I:%M%p \
#[fg=$HOSTNAME_COLOR]ÓÇ≤\
#[fg=black,bg=$HOSTNAME_COLOR,bold] kW "

set -g status-bg $BG_COLOR
set -g status-fg white
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80
set-window-option -g display-panes-time 1500
set-window-option -g window-status-current-style fg=white
set-window-option -g window-status-current-style bg=grey
set-option -g status-interval 1
set-option -g status-style fg=white
set-option -g pane-active-border-style fg=white
set-option -g pane-border-style fg=white

# style values for prefix prompt
set -g @mode_indicator_prefix_mode_style "bg=$TMUX_LISTENING_COLOR,fg=black"
# style values for copy prompt
set -g @mode_indicator_copy_mode_style "bg=$TMUX_COPY_COLOR,fg=black"
# style values for sync prompt
set -g @mode_indicator_sync_mode_style "bg=$TMUX_COPY_COLOR,fg=black"
# style values for empty prompt
set -g @mode_indicator_empty_mode_style "fg=black,bg=$SECONDARY_COLOR"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'
